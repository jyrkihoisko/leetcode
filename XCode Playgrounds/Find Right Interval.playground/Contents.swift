class Solution {
    func findRightInterval(_ intervals: [[Int]]) -> [Int] {

        struct Data {
            var start: Int
            var end: Int
            var index: Int
        }
                
        if intervals.count == 0 { return [Int]() }
        
        var myIntervals = [Data]()

        for (i,val) in intervals.enumerated() {
            let data = Data(start: val[0], end: val[1], index: i)
            myIntervals.append(data)
        }
        myIntervals.sort { (a, b) -> Bool in
            if a.start > b.start { return false }
            return true
        }
        
        var ret = Array(repeating: -1, count: myIntervals.count)
        
        for i in 0..<myIntervals.count {
            let int = myIntervals[i]
            if int.end-int.start == 0 { ret[i] = i; continue } // LC requires this.
            
            for j in i+1..<myIntervals.count {
                if myIntervals[j].start >= int.end {
                    ret[int.index] = myIntervals[j].index
                    break
                }
            }
        }
        print(ret)
        return ret
    }
}

let s = Solution()
let i = [ [3,4], [2,3], [1,2] ], o = [-1, 0, 1]
let i2 = [ [1,4], [2,3], [3,4] ], o2 = [-1, 2, -1]
let i4 = [[-1,2]], o4 = [-1]
let i3: [[Int]] = [[0,1165],[1,2168],[2,2113],[3,923],[4,4004],[5,4387],[6,2100],[7,4803],[8,1537],[9,2980],[10,1936],[11,4726],[12,4302],[13,2181],[14,1319],[15,3356],[16,3173],[17,1752],[18,304],[19,1397],[20,2249],[21,4972],[22,3505],[23,2626],[24,4366],[25,1588],[26,4307],[27,3375],[28,162],[29,4050],[30,3637],[31,231],[32,2278],[33,5074],[34,2994],[35,890],[36,5005],[37,2000],[38,3503],[39,1122],[40,3029],[41,5407],[42,4489],[43,1681],[44,4735],[45,4484],[46,4224],[47,2688],[48,1080],[49,4940],[50,3145],[51,2690],[52,1742],[53,4203],[54,3376],[55,735],[56,626],[57,1307],[58,322],[59,1368],[60,5188],[61,4037],[62,1817],[63,3869],[64,4527],[65,4332],[66,3729],[67,2425],[68,1262],[69,1336],[70,3782],[71,4722],[72,2329],[73,1772],[74,4913],[75,943],[76,1737],[77,1211],[78,3557],[79,1746],[80,3209],[81,2725],[82,1189],[83,2238],[84,1751],[85,1854],[86,4493],[87,545],[88,529],[89,3713],[90,1236],[91,1404],[92,5227],[93,829],[94,4132],[95,643],[96,5242],[97,2128],[98,5446],[99,5049],[100,2047],[101,3044],[102,3011],[103,3897],[104,3031],[105,1949],[106,5345],[107,350],[108,1344],[109,4387],[110,5317],[111,3308],[112,2943],[113,2054],[114,2331],[115,2811],[116,2472],[117,2842],[118,2628],[119,3673],[120,3450],[121,3164],[122,3242],[123,5137],[124,509],[125,2123],[126,4397],[127,1151],[128,300],[129,3033],[130,2774],[131,3126],[132,3052],[133,4319],[134,1467],[135,4842],[136,5365],[137,3807],[138,1719],[139,1518],[140,976],[141,3450],[142,4638],[143,2390],[144,2350],[145,4989],[146,2248],[147,5128],[148,1281],[149,705],[150,2696],[151,5039],[152,2165],[153,1902],[154,1606],[155,1624],[156,4195],[157,3771],[158,4029],[159,3459],[160,3337],[161,2089],[162,461],[163,3051],[164,2720],[165,3217],[166,1720],[167,3481],[168,4684],[169,3965],[170,3922],[171,555],[172,701],[173,3917],[174,5440],[175,2027],[176,3244],[177,3750],[178,4559],[179,2084],[180,4099],[181,3980],[182,3484],[183,1632],[184,5325],[185,3776],[186,1312],[187,758],[188,4017],[189,367],[190,1428],[191,1453],[192,2461],[193,1762],[194,4025],[195,5183],[196,2372],[197,4702],[198,3003],[199,4765],[200,1058],[201,4942],[202,2946],[203,3013],[204,3918],[205,898],[206,843],[207,2750],[208,4443],[209,4260],[210,2841],[211,764],[212,5179],[213,3101],[214,3786],[215,2432],[216,2214],[217,3176],[218,2817],[219,4170],[220,2609],[221,727],[222,1775],[223,4309],[224,2189],[225,1414],[226,3938],[227,5420],[228,3462],[229,560],[230,1548],[231,3821],[232,732],[233,5367],[234,4859],[235,2014],[236,3153],[237,1218],[238,1301],[239,1966],[240,4574],[241,5606],[242,5591],[243,651],[244,2413],[245,5097],[246,3752],[247,2177],[248,2255],[249,5250],[250,1012],[251,1111],[252,1842],[253,4344],[254,4583],[255,3198],[256,4729],[257,2242],[258,2475],[259,2447],[260,661],[261,2866],[262,3117],[263,1193],[264,1639],[265,5246],[266,1446],[267,2653],[268,3667],[269,2756],[270,777],[271,3802],[272,2638],[273,935],[274,4140],[275,2198],[276,5346],[277,4243],[278,3562],[279,3363],[280,4382],[281,3331],[282,5218],[283,838],[284,874],[285,4016],[286,2648],[287,3446],[288,1688],[289,2250],[290,1193],[291,2626],[292,5083],[293,2214],[294,2459],[295,4372],[296,1819],[297,2009],[298,5497],[299,1001],[300,1415],[301,3347],[302,1002],[303,1715],[304,2470],[305,5123],[306,1802],[307,2998],[308,3834],[309,941],[310,1927],[311,1298],[312,4355],[313,831],[314,1954],[315,4107],[316,879],[317,5538],[318,5570],[319,5251],[320,1073],[321,3624],[322,2709],[323,3112],[324,4162],[325,5501],[326,5325],[327,1898],[328,2173],[329,4339],[330,2253],[331,1234],[332,1367],[333,2539],[334,3178],[335,1157],[336,5044],[337,3567],[338,1971],[339,5436],[340,5346],[341,1677],[342,5031],[343,607],[344,3393],[345,4685],[346,3592],[347,3375],[348,1717],[349,844],[350,5581],[351,551],[352,5247],[353,4639],[354,4962],[355,3467],[356,1367],[357,1212],[358,3733],[359,3108],[360,2201],[361,2941],[362,5445],[363,4396],[364,1325],[365,5642],[366,1647],[367,3882],[368,3785],[369,2574],[370,3097],[371,5096],[372,1902],[373,5252],[374,2590],[375,5152],[376,5452],[377,4033],[378,1544],[379,5101],[380,1271],[381,5182],[382,1693],[383,2613],[384,5076],[385,814],[386,1824],[387,1804],[388,1878],[389,3627],[390,5577],[391,2319],[392,4393],[393,899],[394,5390],[395,3927],[396,2174],[397,3002],[398,3196],[399,3763],[400,4379],[401,3093],[402,2633],[403,1428],[404,5336],[405,4546],[406,3539],[407,5535],[408,4374],[409,890],[410,1522],[411,1804],[412,3655],[413,2065],[414,5790],[415,4080],[416,4868],[417,2260],[418,3792],[419,3533],[420,990],[421,1185],[422,1028],[423,3840],[424,3814],[425,5383],[426,3926],[427,4816],[428,4918],[429,2162],[430,3259],[431,3998],[432,1115],[433,1831],[434,4074],[435,1523],[436,1035],[437,5768],[438,3836],[439,4230],[440,2362],[441,5574],[442,5252],[443,3550],[444,2338],[445,3553],[446,2000],[447,1968],[448,5591],[449,5334],[450,2730],[451,2275],[452,916],[453,3908],[454,3397],[455,3322],[456,3950],[457,2613],[458,3379],[459,1193],[460,1485],[461,3776],[462,2906],[463,1413],[464,4477],[465,2022],[466,2259],[467,4676],[468,2240],[469,2988],[470,2317],[471,3978],[472,5298],[473,1297],[474,4611],[475,767],[476,2287],[477,1304],[478,2016],[479,1836],[480,3005],[481,2789],[482,2265],[483,3058],[484,1991],[485,5056],[486,5290],[487,4977],[488,1230],[489,4523],[490,3394],[491,2697],[492,4194],[493,2407]], o3 = [1,1]

print("Tests started")
assert(s.findRightInterval(i) == o)
assert(s.findRightInterval(i2) == o2)
assert(s.findRightInterval(i4) == o4)
assert(s.findRightInterval(i3) == o3)

print("Tests ended")


/*
 TRAHSCAN
 for i in 0..<intervals.count {
     
     let intervalEnd = intervals[i][1]
     if intervalEnd-intervals[i][0] == 0 { ret.append(i); continue }
     var found = false
     var minIndex = Int.max
     var minIndexDistance = Int.max
     
     for j in 0..<intervals.count {
         if j == i { continue }
         //print("i: \(i), j: \(j);  start:\(intervals[j][0]); intervalEnd: \(intervalEnd)")
         if intervals[j][0] >= intervalEnd {
             //ret.append(j)
             if intervals[j][0] - intervalEnd < minIndexDistance {
                 minIndex = j
                 minIndexDistance = intervals[j][0] - intervalEnd
             }
             found = true
         }
     }
     if found == false { ret.append(-1) } else {
         ret.append(minIndex)
     }
 }

 */
